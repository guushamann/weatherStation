{
  "version": 3,
  "sources": ["../node_modules/web-streams-polyfill/src/stub/symbol.ts", "../node_modules/web-streams-polyfill/src/utils.ts", "../node_modules/web-streams-polyfill/src/lib/helpers/miscellaneous.ts", "../node_modules/web-streams-polyfill/src/lib/helpers/webidl.ts", "../node_modules/web-streams-polyfill/src/lib/simple-queue.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/generic-reader.ts", "../node_modules/web-streams-polyfill/src/lib/abstract-ops/internal-methods.ts", "../node_modules/web-streams-polyfill/src/stub/number-isfinite.ts", "../node_modules/web-streams-polyfill/src/stub/math-trunc.ts", "../node_modules/web-streams-polyfill/src/lib/validators/basic.ts", "../node_modules/web-streams-polyfill/src/lib/validators/readable-stream.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/default-reader.ts", "../node_modules/web-streams-polyfill/src/target/es2018/stub/async-iterator-prototype.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/async-iterator.ts", "../node_modules/web-streams-polyfill/src/stub/number-isnan.ts", "../node_modules/web-streams-polyfill/src/lib/abstract-ops/ecmascript.ts", "../node_modules/web-streams-polyfill/src/lib/abstract-ops/miscellaneous.ts", "../node_modules/web-streams-polyfill/src/lib/abstract-ops/queue-with-sizes.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/byte-stream-controller.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/byob-reader.ts", "../node_modules/web-streams-polyfill/src/lib/abstract-ops/queuing-strategy.ts", "../node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy.ts", "../node_modules/web-streams-polyfill/src/lib/validators/underlying-sink.ts", "../node_modules/web-streams-polyfill/src/lib/validators/writable-stream.ts", "../node_modules/web-streams-polyfill/src/lib/abort-signal.ts", "../node_modules/web-streams-polyfill/src/lib/writable-stream.ts", "../node_modules/web-streams-polyfill/src/stub/native.ts", "../node_modules/web-streams-polyfill/src/stub/dom-exception.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/pipe.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/default-controller.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream/tee.ts", "../node_modules/web-streams-polyfill/src/lib/validators/underlying-source.ts", "../node_modules/web-streams-polyfill/src/lib/validators/reader-options.ts", "../node_modules/web-streams-polyfill/src/lib/validators/iterator-options.ts", "../node_modules/web-streams-polyfill/src/lib/validators/pipe-options.ts", "../node_modules/web-streams-polyfill/src/lib/validators/readable-writable-pair.ts", "../node_modules/web-streams-polyfill/src/lib/readable-stream.ts", "../node_modules/web-streams-polyfill/src/lib/validators/queuing-strategy-init.ts", "../node_modules/web-streams-polyfill/src/lib/byte-length-queuing-strategy.ts", "../node_modules/web-streams-polyfill/src/lib/count-queuing-strategy.ts", "../node_modules/web-streams-polyfill/src/lib/validators/transformer.ts", "../node_modules/web-streams-polyfill/src/lib/transform-stream.ts", "../node_modules/fetch-blob/streams.cjs", "../node_modules/fetch-blob/index.js", "../node_modules/fetch-blob/file.js", "../node_modules/formdata-polyfill/esm.min.js", "../node_modules/fetch-blob/from.js", "../node_modules/node-fetch/src/utils/multipart-parser.js", "../node_modules/intl-dateformat/lib/index.js", "../src/index.ts", "../node_modules/node-fetch/src/index.js", "../node_modules/data-uri-to-buffer/src/index.ts", "../node_modules/node-fetch/src/body.js", "../node_modules/node-fetch/src/errors/base.js", "../node_modules/node-fetch/src/errors/fetch-error.js", "../node_modules/node-fetch/src/utils/is.js", "../node_modules/node-fetch/src/headers.js", "../node_modules/node-fetch/src/utils/is-redirect.js", "../node_modules/node-fetch/src/response.js", "../node_modules/node-fetch/src/request.js", "../node_modules/node-fetch/src/utils/get-search.js", "../node_modules/node-fetch/src/utils/referrer.js", "../node_modules/node-fetch/src/errors/abort-error.js", "../src/solarEdge.ts"],
  "sourcesContent": ["/// <reference lib=\"es2015.symbol\" />\n\nconst SymbolPolyfill: (description?: string) => symbol =\n  typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n    Symbol :\n    description => `Symbol(${description})` as any as symbol;\n\nexport default SymbolPolyfill;\n", "/// <reference lib=\"dom\" />\n\nexport function noop(): undefined {\n  return undefined;\n}\n\nfunction getGlobals() {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n", "import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n", "import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n", "import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n", "import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n", "export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n", "/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n", "/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n", "import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n", "import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n", "import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n", "/// <reference lib=\"es2018.asynciterable\" />\n\n/* eslint-disable @typescript-eslint/no-empty-function */\nexport const AsyncIteratorPrototype: AsyncIterable<any> | undefined =\n  Object.getPrototypeOf(Object.getPrototypeOf(async function* (): AsyncIterableIterator<any> {}).prototype);\n", "/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n", "/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n", "export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CanTransferArrayBuffer(O: ArrayBufferLike): boolean {\n  return true;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean {\n  return false;\n}\n\nexport function ArrayBufferSlice(buffer: ArrayBufferLike, begin: number, end: number): ArrayBufferLike {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n", "import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: ArrayBufferView): Uint8Array {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer);\n}\n", "import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n", "import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  // try {\n  const buffer = TransferArrayBuffer(view.buffer);\n  // } catch (e) {\n  //   readIntoRequest._errorSteps(e);\n  //   return;\n  // }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n  }\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n", "import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n", "import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n", "import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n", "import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n", "import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n", "/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n", "import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { AbortController, AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort();\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer\u2019s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream\u2019s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer\u2019s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream\u2019s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer\u2019s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer\u2019s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It\u2019s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n", "/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined =\n  typeof DOMException !== 'undefined' ? DOMException : undefined;\n", "/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line no-redeclare\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n", "import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n", "import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n", "import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  IsReadableStream,\n  ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(stream: ReadableStream<R>,\n                                            cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk1\n            );\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk2\n            );\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<Uint8Array> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<Uint8Array>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<Uint8Array> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: ArrayBufferView, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<Uint8Array>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<ArrayBufferView> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n", "import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n", "import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n", "import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n", "import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n", "import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n", "import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n", "import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n", "import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\nObject.defineProperty(byteLengthSizeFunction, 'name', {\n  value: 'size',\n  configurable: true\n});\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n", "import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\nObject.defineProperty(countSizeFunction, 'name', {\n  value: 'size',\n  configurable: true\n});\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n", "import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n", "import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(\n    stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n    e\n  );\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side\u2019s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n", "/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process')\n    const { emitWarning } = process\n    try {\n      process.emitWarning = () => {}\n      Object.assign(globalThis, require('node:stream/web'))\n      process.emitWarning = emitWarning\n    } catch (error) {\n      process.emitWarning = emitWarning\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, require('web-streams-polyfill/dist/ponyfill.es2018.js'))\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = require('buffer')\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0\n      const blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\n          const buffer = await chunk.arrayBuffer()\n          position += buffer.byteLength\n          ctrl.enqueue(new Uint8Array(buffer))\n\n          if (position === blob.size) {\n            ctrl.close()\n          }\n        }\n      })\n    }\n  }\n} catch (error) {}\n/* c8 ignore end */\n", "/*! fetch-blob. MIT License. Jimmy W\u00E4rting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs'\n\n/** @typedef {import('buffer').Blob} NodeBlob} */\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\n/** @param {(Blob | NodeBlob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * part.stream()\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset\n        const end = part.byteOffset + part.byteLength\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE)\n          const chunk = part.buffer.slice(position, position + size)\n          position += chunk.byteLength\n          yield new Uint8Array(chunk)\n        }\n      } else {\n        yield part\n      }\n    } else {\n      /* c8 ignore start */\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0\n      while (position !== part.size) {\n        const chunk = part.slice(position, Math.min(part.size, position + POOL_SIZE))\n        const buffer = await chunk.arrayBuffer()\n        position += buffer.byteLength\n        yield new Uint8Array(buffer)\n      }\n      /* c8 ignore end */\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {}\n\n    const encoder = new TextEncoder()\n    for (const element of blobParts) {\n      let part\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0))\n      } else if (element instanceof Blob) {\n        part = element\n      } else {\n        part = encoder.encode(element)\n      }\n\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\n      this.#parts.push(part)\n    }\n\n    const type = options.type === undefined ? '' : String(options.type)\n\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder()\n    let str = ''\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true })\n    }\n    // Remaining\n    str += decoder.decode()\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size)\n    let offset = 0\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset)\n      offset += chunk.length\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true)\n\n    return new globalThis.ReadableStream({\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next()\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\n      },\n\n      async cancel () {\n        await it.return()\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\n\n    const span = Math.max(relativeEnd - relativeStart, 0)\n    const parts = this.#parts\n    const blobParts = []\n    let added = 0\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size\n        relativeEnd -= size\n      } else {\n        let chunk\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.byteLength\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.size\n        }\n        relativeEnd -= size\n        blobParts.push(chunk)\n        relativeStart = 0 // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() })\n    blob.#size = span\n    blob.#parts = blobParts\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n}\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n})\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob\nexport default Blob\n", "import Blob from './index.js'\n\nconst _File = class File extends Blob {\n  #lastModified = 0\n  #name = ''\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */// @ts-ignore\n  constructor (fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\n    }\n    super(fileBits, options)\n\n    if (options === null) options = {}\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified\n    }\n\n    this.#name = String(fileName)\n  }\n\n  get name () {\n    return this.#name\n  }\n\n  get lastModified () {\n    return this.#lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n}\n\n/** @type {typeof globalThis.File} */// @ts-ignore\nexport const File = _File\nexport default File\n", "/*! formdata-polyfill. MIT License. Jimmy W\u00E4rting <https://jimmy.warting.se/opensource> */\n\nimport C from 'fetch-blob'\nimport F from 'fetch-blob/file.js'\n\nvar {toStringTag:t,iterator:i,hasInstance:h}=Symbol,\nr=Math.random,\nm='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\nf=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new F([b],c,b):b]:[a,b+'']),\ne=(c,f)=>(f?c:c.replace(/\\r?\\n|\\r/g,'\\r\\n')).replace(/\\n/g,'%0A').replace(/\\r/g,'%0D').replace(/\"/g,'%22'),\nx=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}}\n\nexport const File = F\n\n/** @type {typeof globalThis.FormData} */\nexport const FormData = class FormData {\n#d=[];\nconstructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}\nget [t]() {return 'FormData'}\n[i](){return this.entries()}\nstatic [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}\nappend(...a){x('append',arguments,2);this.#d.push(f(...a))}\ndelete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a)}\nget(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}\ngetAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}\nhas(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}\nforEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this)}\nset(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}\n*entries(){yield*this.#d}\n*keys(){for(var[a]of this)yield a}\n*values(){for(var[,a]of this)yield a}}\n\n/** @param {FormData} F */\nexport function formDataToBlob (F,B=C){\nvar b=`${r()}${r()}`.replace(/\\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\\r\\nContent-Disposition: form-data; name=\"`\nF.forEach((v,n)=>typeof v=='string'\n?c.push(p+e(n)+`\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n')}\\r\\n`)\n:c.push(p+e(n)+`\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type||\"application/octet-stream\"}\\r\\n\\r\\n`, v, '\\r\\n'))\nc.push(`--${b}--`)\nreturn new B(c,{type:\"multipart/form-data; boundary=\"+b})}\n", "import { statSync, createReadStream, promises as fs } from 'node:fs'\nimport { basename } from 'node:path'\nimport { MessageChannel } from 'node:worker_threads'\n\nimport File from './file.js'\nimport Blob from './index.js'\n\nconst { stat } = fs\n\nconst DOMException = globalThis.DOMException || (() => {\n  const port = new MessageChannel().port1\n  const ab = new ArrayBuffer(0)\n  try { port.postMessage(ab, [ab, ab]) } catch (err) { return err.constructor }\n})()\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type)\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type)\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type })\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs })\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path\n    this.#start = options.start\n    this.size = options.size\n    this.lastModified = options.lastModified\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      size: end - start,\n      start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs } = await stat(this.#path)\n    if (mtimeMs > this.lastModified) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nexport default blobFromSync\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync }\n", "import {File} from 'fetch-blob/from.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\n\nlet s = 0;\nconst S = {\n\tSTART_BOUNDARY: s++,\n\tHEADER_FIELD_START: s++,\n\tHEADER_FIELD: s++,\n\tHEADER_VALUE_START: s++,\n\tHEADER_VALUE: s++,\n\tHEADER_VALUE_ALMOST_DONE: s++,\n\tHEADERS_ALMOST_DONE: s++,\n\tPART_DATA_START: s++,\n\tPART_DATA: s++,\n\tEND: s++\n};\n\nlet f = 1;\nconst F = {\n\tPART_BOUNDARY: f,\n\tLAST_BOUNDARY: f *= 2\n};\n\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\n\nconst lower = c => c | 0x20;\n\nconst noop = () => {};\n\nclass MultipartParser {\n\t/**\n\t * @param {string} boundary\n\t */\n\tconstructor(boundary) {\n\t\tthis.index = 0;\n\t\tthis.flags = 0;\n\n\t\tthis.onHeaderEnd = noop;\n\t\tthis.onHeaderField = noop;\n\t\tthis.onHeadersEnd = noop;\n\t\tthis.onHeaderValue = noop;\n\t\tthis.onPartBegin = noop;\n\t\tthis.onPartData = noop;\n\t\tthis.onPartEnd = noop;\n\n\t\tthis.boundaryChars = {};\n\n\t\tboundary = '\\r\\n--' + boundary;\n\t\tconst ui8a = new Uint8Array(boundary.length);\n\t\tfor (let i = 0; i < boundary.length; i++) {\n\t\t\tui8a[i] = boundary.charCodeAt(i);\n\t\t\tthis.boundaryChars[ui8a[i]] = true;\n\t\t}\n\n\t\tthis.boundary = ui8a;\n\t\tthis.lookbehind = new Uint8Array(this.boundary.length + 8);\n\t\tthis.state = S.START_BOUNDARY;\n\t}\n\n\t/**\n\t * @param {Uint8Array} data\n\t */\n\twrite(data) {\n\t\tlet i = 0;\n\t\tconst length_ = data.length;\n\t\tlet previousIndex = this.index;\n\t\tlet {lookbehind, boundary, boundaryChars, index, state, flags} = this;\n\t\tconst boundaryLength = this.boundary.length;\n\t\tconst boundaryEnd = boundaryLength - 1;\n\t\tconst bufferLength = data.length;\n\t\tlet c;\n\t\tlet cl;\n\n\t\tconst mark = name => {\n\t\t\tthis[name + 'Mark'] = i;\n\t\t};\n\n\t\tconst clear = name => {\n\t\t\tdelete this[name + 'Mark'];\n\t\t};\n\n\t\tconst callback = (callbackSymbol, start, end, ui8a) => {\n\t\t\tif (start === undefined || start !== end) {\n\t\t\t\tthis[callbackSymbol](ui8a && ui8a.subarray(start, end));\n\t\t\t}\n\t\t};\n\n\t\tconst dataCallback = (name, clear) => {\n\t\t\tconst markSymbol = name + 'Mark';\n\t\t\tif (!(markSymbol in this)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (clear) {\n\t\t\t\tcallback(name, this[markSymbol], i, data);\n\t\t\t\tdelete this[markSymbol];\n\t\t\t} else {\n\t\t\t\tcallback(name, this[markSymbol], data.length, data);\n\t\t\t\tthis[markSymbol] = 0;\n\t\t\t}\n\t\t};\n\n\t\tfor (i = 0; i < length_; i++) {\n\t\t\tc = data[i];\n\n\t\t\tswitch (state) {\n\t\t\t\tcase S.START_BOUNDARY:\n\t\t\t\t\tif (index === boundary.length - 2) {\n\t\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\n\t\t\t\t\t\t} else if (c !== CR) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (index - 1 === boundary.length - 2) {\n\t\t\t\t\t\tif (flags & F.LAST_BOUNDARY && c === HYPHEN) {\n\t\t\t\t\t\t\tstate = S.END;\n\t\t\t\t\t\t\tflags = 0;\n\t\t\t\t\t\t} else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\tcallback('onPartBegin');\n\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c !== boundary[index + 2]) {\n\t\t\t\t\t\tindex = -2;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c === boundary[index + 2]) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_FIELD_START:\n\t\t\t\t\tstate = S.HEADER_FIELD;\n\t\t\t\t\tmark('onHeaderField');\n\t\t\t\t\tindex = 0;\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.HEADER_FIELD:\n\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\tclear('onHeaderField');\n\t\t\t\t\t\tstate = S.HEADERS_ALMOST_DONE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (c === COLON) {\n\t\t\t\t\t\tif (index === 1) {\n\t\t\t\t\t\t\t// empty header field\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdataCallback('onHeaderField', true);\n\t\t\t\t\t\tstate = S.HEADER_VALUE_START;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcl = lower(c);\n\t\t\t\t\tif (cl < A || cl > Z) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_VALUE_START:\n\t\t\t\t\tif (c === SPACE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmark('onHeaderValue');\n\t\t\t\t\tstate = S.HEADER_VALUE;\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.HEADER_VALUE:\n\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\tdataCallback('onHeaderValue', true);\n\t\t\t\t\t\tcallback('onHeaderEnd');\n\t\t\t\t\t\tstate = S.HEADER_VALUE_ALMOST_DONE;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADER_VALUE_ALMOST_DONE:\n\t\t\t\t\tif (c !== LF) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.HEADERS_ALMOST_DONE:\n\t\t\t\t\tif (c !== LF) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback('onHeadersEnd');\n\t\t\t\t\tstate = S.PART_DATA_START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.PART_DATA_START:\n\t\t\t\t\tstate = S.PART_DATA;\n\t\t\t\t\tmark('onPartData');\n\t\t\t\t\t// falls through\n\t\t\t\tcase S.PART_DATA:\n\t\t\t\t\tpreviousIndex = index;\n\n\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t// boyer-moore derrived algorithm to safely skip non-boundary data\n\t\t\t\t\t\ti += boundaryEnd;\n\t\t\t\t\t\twhile (i < bufferLength && !(data[i] in boundaryChars)) {\n\t\t\t\t\t\t\ti += boundaryLength;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ti -= boundaryEnd;\n\t\t\t\t\t\tc = data[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index < boundary.length) {\n\t\t\t\t\t\tif (boundary[index] === c) {\n\t\t\t\t\t\t\tif (index === 0) {\n\t\t\t\t\t\t\t\tdataCallback('onPartData', true);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (index === boundary.length) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tif (c === CR) {\n\t\t\t\t\t\t\t// CR = part boundary\n\t\t\t\t\t\t\tflags |= F.PART_BOUNDARY;\n\t\t\t\t\t\t} else if (c === HYPHEN) {\n\t\t\t\t\t\t\t// HYPHEN = end boundary\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (index - 1 === boundary.length) {\n\t\t\t\t\t\tif (flags & F.PART_BOUNDARY) {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\tif (c === LF) {\n\t\t\t\t\t\t\t\t// unset the PART_BOUNDARY flag\n\t\t\t\t\t\t\t\tflags &= ~F.PART_BOUNDARY;\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\n\t\t\t\t\t\t\t\tcallback('onPartBegin');\n\t\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (flags & F.LAST_BOUNDARY) {\n\t\t\t\t\t\t\tif (c === HYPHEN) {\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\n\t\t\t\t\t\t\t\tstate = S.END;\n\t\t\t\t\t\t\t\tflags = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t// when matching a possible boundary, keep a lookbehind reference\n\t\t\t\t\t\t// in case it turns out to be a false lead\n\t\t\t\t\t\tlookbehind[index - 1] = c;\n\t\t\t\t\t} else if (previousIndex > 0) {\n\t\t\t\t\t\t// if our boundary turned out to be rubbish, the captured lookbehind\n\t\t\t\t\t\t// belongs to partData\n\t\t\t\t\t\tconst _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\n\t\t\t\t\t\tcallback('onPartData', 0, previousIndex, _lookbehind);\n\t\t\t\t\t\tpreviousIndex = 0;\n\t\t\t\t\t\tmark('onPartData');\n\n\t\t\t\t\t\t// reconsider the current character even so it interrupted the sequence\n\t\t\t\t\t\t// it could be the beginning of a new sequence\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase S.END:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unexpected state entered: ${state}`);\n\t\t\t}\n\t\t}\n\n\t\tdataCallback('onHeaderField');\n\t\tdataCallback('onHeaderValue');\n\t\tdataCallback('onPartData');\n\n\t\t// Update properties for the next call\n\t\tthis.index = index;\n\t\tthis.state = state;\n\t\tthis.flags = flags;\n\t}\n\n\tend() {\n\t\tif ((this.state === S.HEADER_FIELD_START && this.index === 0) ||\n\t\t\t(this.state === S.PART_DATA && this.index === this.boundary.length)) {\n\t\t\tthis.onPartEnd();\n\t\t} else if (this.state !== S.END) {\n\t\t\tthrow new Error('MultipartParser.end(): stream ended unexpectedly');\n\t\t}\n\t}\n}\n\nfunction _fileName(headerValue) {\n\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n\tconst m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n\tif (!m) {\n\t\treturn;\n\t}\n\n\tconst match = m[2] || m[3] || '';\n\tlet filename = match.slice(match.lastIndexOf('\\\\') + 1);\n\tfilename = filename.replace(/%22/g, '\"');\n\tfilename = filename.replace(/&#(\\d{4});/g, (m, code) => {\n\t\treturn String.fromCharCode(code);\n\t});\n\treturn filename;\n}\n\nexport async function toFormData(Body, ct) {\n\tif (!/multipart/i.test(ct)) {\n\t\tthrow new TypeError('Failed to fetch');\n\t}\n\n\tconst m = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n\n\tif (!m) {\n\t\tthrow new TypeError('no or bad content-type header, no multipart boundary');\n\t}\n\n\tconst parser = new MultipartParser(m[1] || m[2]);\n\n\tlet headerField;\n\tlet headerValue;\n\tlet entryValue;\n\tlet entryName;\n\tlet contentType;\n\tlet filename;\n\tconst entryChunks = [];\n\tconst formData = new FormData();\n\n\tconst onPartData = ui8a => {\n\t\tentryValue += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tconst appendToFile = ui8a => {\n\t\tentryChunks.push(ui8a);\n\t};\n\n\tconst appendFileToFormData = () => {\n\t\tconst file = new File(entryChunks, filename, {type: contentType});\n\t\tformData.append(entryName, file);\n\t};\n\n\tconst appendEntryToFormData = () => {\n\t\tformData.append(entryName, entryValue);\n\t};\n\n\tconst decoder = new TextDecoder('utf-8');\n\tdecoder.decode();\n\n\tparser.onPartBegin = function () {\n\t\tparser.onPartData = onPartData;\n\t\tparser.onPartEnd = appendEntryToFormData;\n\n\t\theaderField = '';\n\t\theaderValue = '';\n\t\tentryValue = '';\n\t\tentryName = '';\n\t\tcontentType = '';\n\t\tfilename = null;\n\t\tentryChunks.length = 0;\n\t};\n\n\tparser.onHeaderField = function (ui8a) {\n\t\theaderField += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tparser.onHeaderValue = function (ui8a) {\n\t\theaderValue += decoder.decode(ui8a, {stream: true});\n\t};\n\n\tparser.onHeaderEnd = function () {\n\t\theaderValue += decoder.decode();\n\t\theaderField = headerField.toLowerCase();\n\n\t\tif (headerField === 'content-disposition') {\n\t\t\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n\t\t\tconst m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n\n\t\t\tif (m) {\n\t\t\t\tentryName = m[2] || m[3] || '';\n\t\t\t}\n\n\t\t\tfilename = _fileName(headerValue);\n\n\t\t\tif (filename) {\n\t\t\t\tparser.onPartData = appendToFile;\n\t\t\t\tparser.onPartEnd = appendFileToFormData;\n\t\t\t}\n\t\t} else if (headerField === 'content-type') {\n\t\t\tcontentType = headerValue;\n\t\t}\n\n\t\theaderValue = '';\n\t\theaderField = '';\n\t};\n\n\tfor await (const chunk of Body) {\n\t\tparser.write(chunk);\n\t}\n\n\tparser.end();\n\n\treturn formData;\n}\n", "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global['intl-dateformat'] = {}));\n}(this, function (exports) { 'use strict';\n\n  const defaultPattern = '[YMDdAaHhms]+';\r\n  const identity = (x) => x;\r\n  const formatters = {\r\n      YYYY: parts => parts.year,\r\n      YY: parts => parts.year.slice(-2),\r\n      MMMM: parts => parts.lmonth,\r\n      MMM: parts => parts.lmonth.slice(0, 3),\r\n      MM: parts => parts.month,\r\n      DD: parts => parts.day,\r\n      dddd: parts => parts.weekday,\r\n      ddd: parts => parts.weekday.slice(0, 3),\r\n      A: parts => parts.dayPeriod,\r\n      a: parts => parts.dayPeriod.toLowerCase(),\r\n      HH: parts => ('0' + (Number(parts.lhour) % 24)).slice(-2),\r\n      hh: parts => parts.hour,\r\n      mm: parts => parts.minute,\r\n      ss: parts => parts.second\r\n  };\r\n  const createCustomPattern = (customFormatters) => Object.keys(customFormatters).reduce((pattern, key) => `|${key}`, '');\r\n  function formatDate(customFormatters, format, parts, date) {\r\n      const customPattern = createCustomPattern(customFormatters);\r\n      const patternRegexp = new RegExp(`${defaultPattern}${customPattern}`, 'g');\r\n      const allFormatters = Object.assign({}, formatters, customFormatters);\r\n      return format.replace(patternRegexp, (mask) => (allFormatters[mask] || identity)(parts, date));\r\n  }\n\n  const parsers = new Map();\r\n  const intlFormattersOptions = [\r\n      {\r\n          weekday: 'long',\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          second: '2-digit',\r\n      },\r\n      {\r\n          month: 'long',\r\n          hour: '2-digit',\r\n          hour12: false,\r\n      },\r\n  ];\r\n  const createIntlFormatterWith = (options) => intlFormattersOptions.map((intlFormatterOptions) => new Intl.DateTimeFormat(options.locale, Object.assign({}, intlFormatterOptions, { timeZone: options.timezone })));\r\n  const longTokensTransformer = (token) => (token.type !== 'literal' ? { type: `l${token.type}`, value: token.value } : token);\r\n  const datePartsReducer = (parts, token) => {\r\n      parts[token.type] = token.value;\r\n      return parts;\r\n  };\r\n  const tokenize = (intlFormatter, date) => intlFormatter.formatToParts(date).filter((token) => token.type !== 'literal');\r\n  const normalize = (parts) => {\r\n      parts.dayPeriod = parts.dayPeriod || parts.dayperiod || '';\r\n      delete parts.dayperiod;\r\n      parts.lhour = ('0' + (Number(parts.lhour) % 24)).slice(-2);\r\n      return parts;\r\n  };\r\n  const createParser = (options) => {\r\n      const [intlFormatter, intlFormatterLong] = createIntlFormatterWith(options);\r\n      return function parseDateImpl(date) {\r\n          const tokens = tokenize(intlFormatter, date);\r\n          const longTokens = tokenize(intlFormatterLong, date).map(longTokensTransformer);\r\n          const allTokens = [...tokens, ...longTokens];\r\n          const parts = allTokens.reduce(datePartsReducer, {});\r\n          return normalize(parts);\r\n      };\r\n  };\r\n  function parseDate(date, options = {}) {\r\n      const key = `${options.locale}${options.timezone}`;\r\n      let parser = parsers.get(key);\r\n      if (!parser) {\r\n          parser = createParser(options);\r\n          parsers.set(key, parser);\r\n      }\r\n      return parser(date);\r\n  }\n\n  function createDateFormatter(customFormatters) {\r\n      return function intlFormatDate(date, format, options) {\r\n          const tokens = parseDate(date, options);\r\n          const output = formatDate(customFormatters, format, tokens, date);\r\n          return output;\r\n      };\r\n  }\n\n  var index = createDateFormatter({});\n\n  exports.default = index;\n  exports.createDateFormatter = createDateFormatter;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n", "import express from 'express'\nimport cors from 'cors'\nimport http from 'http'\nimport {startTempSensor} from './tempSensor'\nimport {Server} from \"socket.io\"\nimport {getCurrentSolarData} from './solarEdge'\n\n\nconst app = express();\napp.use(cors())\nconst server = http.createServer(app);\n\n\nconst io = new Server(server, {\n    cors: {\n        origin: [\"http://localhost:3000\"],\n    }\n});\n\n\napp.get('/solar', async (req, res) => {\n    const data = await getCurrentSolarData()\n    console.log(data);\n    res.json(data);\n});\nio.on('connection', (socket) => {\n    //startTempSensor(socket)\n    console.log('a user connected');\n});\n\nserver.listen(3000, () => {\n    console.log('listening on *:3000');\n});", "/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'node:stream';\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, clone} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {parseReferrerPolicyFromHeader} from './utils/referrer.js';\n\nexport {Headers, Request, Response, FetchError, AbortError, isRedirect};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL, options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tresponse.body.destroy(error);\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tconst locationURL = location === null ? null : new URL(location, request.url);\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), reject);\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), reject);\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), reject);\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tbody = (chunk[0] & 0x0F) === 0x08 ? pump(body, zlib.createInflate(), reject) : pump(body, zlib.createInflateRaw(), reject);\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), reject);\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(request_, request);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\n\t\trequest.on('abort', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t});\n\n\t\tsocket.on('data', buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t});\n\t});\n}\n", null, "\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, {PassThrough} from 'node:stream';\nimport {types, deprecate} from 'node:util';\n\nimport Blob from 'fetch-blob';\nimport {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n\nimport {FetchError} from './errors/fetch-error.js';\nimport {FetchBaseError} from './errors/base.js';\nimport {isBlob, isURLSearchParameters} from './utils/is.js';\n\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer.from(body.toString());\n\t\t} else if (isBlob(body)) {\n\t\t\t// Body is blob\n\t\t} else if (Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('./utils/multipart-parser.js');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.buffer();\n\n\t\treturn new Blob([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn JSON.parse(buffer.toString());\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn buffer.toString();\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nexport const clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport const extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport const getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {void}\n */\nexport const writeToStream = (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tbody.pipe(dest);\n\t}\n};\n", "export class FetchBaseError extends Error {\n\tconstructor(message, type) {\n\t\tsuper(message);\n\t\t// Hide custom error implementation details from end-users\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\tthis.type = type;\n\t}\n\n\tget name() {\n\t\treturn this.constructor.name;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n}\n", "\nimport {FetchBaseError} from './base.js';\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nexport class FetchError extends FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n", "/**\n * Is.js\n *\n * Object type checks.\n */\n\nconst NAME = Symbol.toStringTag;\n\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isURLSearchParameters = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.append === 'function' &&\n\t\ttypeof object.delete === 'function' &&\n\t\ttypeof object.get === 'function' &&\n\t\ttypeof object.getAll === 'function' &&\n\t\ttypeof object.has === 'function' &&\n\t\ttypeof object.set === 'function' &&\n\t\ttypeof object.sort === 'function' &&\n\t\tobject[NAME] === 'URLSearchParams'\n\t);\n};\n\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isBlob = object => {\n\treturn (\n\t\tobject &&\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.arrayBuffer === 'function' &&\n\t\ttypeof object.type === 'string' &&\n\t\ttypeof object.stream === 'function' &&\n\t\ttypeof object.constructor === 'function' &&\n\t\t/^(Blob|File)$/.test(object[NAME])\n\t);\n};\n\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isAbortSignal = object => {\n\treturn (\n\t\ttypeof object === 'object' && (\n\t\t\tobject[NAME] === 'AbortSignal' ||\n\t\t\tobject[NAME] === 'EventTarget'\n\t\t)\n\t);\n};\n", "/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\nimport {types} from 'node:util';\nimport http from 'node:http';\n\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ?\n\thttp.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ?\n\thttp.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nexport default class Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\t\t// No op\n\t\t} else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* c8 ignore next */\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nexport function fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n", "const redirectStatus = new Set([301, 302, 303, 307, 308]);\n\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\nexport const isRedirect = code => {\n\treturn redirectStatus.has(code);\n};\n", "/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType} from './body.js';\nimport {isRedirect} from './utils/is-redirect.js';\n\nconst INTERNALS = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Response extends Body {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new Headers(options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response(clone(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size,\n\t\t\thighWaterMark: this.highWaterMark\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!isRedirect(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS].type = 'error';\n\t\treturn response;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n", "\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport {format as formatUrl} from 'node:url';\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType, getTotalBytes} from './body.js';\nimport {isAbortSignal} from './utils/is.js';\nimport {getSearch} from './utils/get-search.js';\nimport {\n\tvalidateReferrerPolicy, determineRequestsReferrer, DEFAULT_REFERRER_POLICY\n} from './utils/referrer.js';\n\nconst INTERNALS = Symbol('Request internals');\n\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} obj\n * @return {boolean}\n */\nconst isRequest = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object[INTERNALS] === 'object'\n\t);\n};\n\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nexport default class Request extends Body {\n\tconstructor(input, init = {}) {\n\t\tlet parsedURL;\n\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\t\tif (isRequest(input)) {\n\t\t\tparsedURL = new URL(input.url);\n\t\t} else {\n\t\t\tparsedURL = new URL(input);\n\t\t\tinput = {};\n\t\t}\n\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentails.`);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (((init.body != null || isRequest(input)) && input.body !== null) &&\n\t\t\t(method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tconst inputBody = init.body ?\n\t\t\tinit.body :\n\t\t\t(isRequest(input) && input.body !== null ?\n\t\t\t\tclone(input) :\n\t\t\t\tnull);\n\n\t\tsuper(inputBody, {\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.set('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ?\n\t\t\tinput.signal :\n\t\t\tnull;\n\t\tif ('signal' in init) {\n\t\t\tsignal = init.signal;\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n\t\t}\n\n\t\t// \u00A75.4, Request constructor steps, step 15.1\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\n\t\tif (referrer === '') {\n\t\t\t// \u00A75.4, Request constructor steps, step 15.2\n\t\t\treferrer = 'no-referrer';\n\t\t} else if (referrer) {\n\t\t\t// \u00A75.4, Request constructor steps, step 15.3.1, 15.3.2\n\t\t\tconst parsedReferrer = new URL(referrer);\n\t\t\t// \u00A75.4, Request constructor steps, step 15.3.3, 15.3.4\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n\t\t} else {\n\t\t\treferrer = undefined;\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal,\n\t\t\treferrer\n\t\t};\n\n\t\t// Node-fetch-only options\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n\n\t\t// \u00A75.4, Request constructor steps, step 16.\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS].method;\n\t}\n\n\tget url() {\n\t\treturn formatUrl(this[INTERNALS].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS].signal;\n\t}\n\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\n\tget referrer() {\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer === 'client') {\n\t\t\treturn 'about:client';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer) {\n\t\t\treturn this[INTERNALS].referrer.toString();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget referrerPolicy() {\n\t\treturn this[INTERNALS].referrerPolicy;\n\t}\n\n\tset referrerPolicy(referrerPolicy) {\n\t\tthis[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n\t}\n\n\t/**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Request';\n\t}\n}\n\nObject.defineProperties(Request.prototype, {\n\tmethod: {enumerable: true},\n\turl: {enumerable: true},\n\theaders: {enumerable: true},\n\tredirect: {enumerable: true},\n\tclone: {enumerable: true},\n\tsignal: {enumerable: true},\n\treferrer: {enumerable: true},\n\treferrerPolicy: {enumerable: true}\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nexport const getNodeRequestOptions = request => {\n\tconst {parsedURL} = request[INTERNALS];\n\tconst headers = new Headers(request[INTERNALS].headers);\n\n\t// Fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\n\tif (request.body !== null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// 4.1. Main fetch, step 2.6\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\n\t// > default referrer policy.\n\tif (request.referrerPolicy === '') {\n\t\trequest.referrerPolicy = DEFAULT_REFERRER_POLICY;\n\t}\n\n\t// 4.1. Main fetch, step 2.7\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n\t// > determine request's referrer.\n\tif (request.referrer && request.referrer !== 'no-referrer') {\n\t\trequest[INTERNALS].referrer = determineRequestsReferrer(request);\n\t} else {\n\t\trequest[INTERNALS].referrer = 'no-referrer';\n\t}\n\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n\t// >  and isomorphic encoded, to httpRequest's header list.\n\tif (request[INTERNALS].referrer instanceof URL) {\n\t\theaders.set('Referer', request.referrer);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate,br');\n\t}\n\n\tlet {agent} = request;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\tif (!headers.has('Connection') && !agent) {\n\t\theaders.set('Connection', 'close');\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\tconst search = getSearch(parsedURL);\n\n\t// Pass the full URL directly to request(), but overwrite the following\n\t// options:\n\tconst options = {\n\t\t// Overwrite search to retain trailing ? (issue #776)\n\t\tpath: parsedURL.pathname + search,\n\t\t// The following options are not expressed in the URL\n\t\tmethod: request.method,\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\n\t\tagent\n\t};\n\n\treturn {\n\t\tparsedURL,\n\t\toptions\n\t};\n};\n", "export const getSearch = parsedURL => {\n\tif (parsedURL.search) {\n\t\treturn parsedURL.search;\n\t}\n\n\tconst lastOffset = parsedURL.href.length - 1;\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n", "import {isIP} from 'net';\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy \u00A78.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\nexport function stripURLForUseAsAReferrer(url, originOnly = false) {\n\t// 1. If url is null, return no referrer.\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\treturn 'no-referrer';\n\t}\n\n\turl = new URL(url);\n\n\t// 2. If url's scheme is a local scheme, then return no referrer.\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\n\t\treturn 'no-referrer';\n\t}\n\n\t// 3. Set url's username to the empty string.\n\turl.username = '';\n\n\t// 4. Set url's password to null.\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\turl.password = '';\n\n\t// 5. Set url's fragment to null.\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\turl.hash = '';\n\n\t// 6. If the origin-only flag is true, then:\n\tif (originOnly) {\n\t\t// 6.1. Set url's path to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n\t\turl.pathname = '';\n\n\t\t// 6.2. Set url's query to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\t\turl.search = '';\n\t}\n\n\t// 7. Return url.\n\treturn url;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\nexport const ReferrerPolicy = new Set([\n\t'',\n\t'no-referrer',\n\t'no-referrer-when-downgrade',\n\t'same-origin',\n\t'origin',\n\t'strict-origin',\n\t'origin-when-cross-origin',\n\t'strict-origin-when-cross-origin',\n\t'unsafe-url'\n]);\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\nexport const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy \u00A73. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\nexport function validateReferrerPolicy(referrerPolicy) {\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n\t}\n\n\treturn referrerPolicy;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy \u00A73.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isOriginPotentiallyTrustworthy(url) {\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\n\t// Not applicable\n\n\t// 2. Assert: origin is a tuple origin.\n\t// Not for implementations\n\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n\tconst hostIPVersion = isIP(hostIp);\n\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n\t// We are returning FALSE here because we cannot ensure conformance to\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\tif (/^(.+\\.)*localhost$/.test(url.host)) {\n\t\treturn false;\n\t}\n\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\tif (url.protocol === 'file:') {\n\t\treturn true;\n\t}\n\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 9. Return \"Not Trustworthy\".\n\treturn false;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy \u00A73.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isUrlPotentiallyTrustworthy(url) {\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\n\t\treturn true;\n\t}\n\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\tif (url.protocol === 'data:') {\n\t\treturn true;\n\t}\n\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n\t// trustworthy.\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 3. Return the result of executing \u00A73.2 Is origin potentially trustworthy? on url's origin.\n\treturn isOriginPotentiallyTrustworthy(url);\n}\n\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy \u00A78.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy \u00A78.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy \u00A78.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\nexport function determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n\t// these cases:\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\n\t// > algorithm.\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n\t\treturn null;\n\t}\n\n\t// 1. Let policy be request's associated referrer policy.\n\tconst policy = request.referrerPolicy;\n\n\t// 2. Let environment be request's client.\n\t// not applicable to node.js\n\n\t// 3. Switch on request's referrer:\n\tif (request.referrer === 'about:client') {\n\t\treturn 'no-referrer';\n\t}\n\n\t// \"a URL\": Let referrerSource be request's referrer.\n\tconst referrerSource = request.referrer;\n\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\n\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n\t//    origin-only flag set to true.\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n\t//    referrerURL to referrerOrigin.\n\tif (referrerURL.toString().length > 4096) {\n\t\treferrerURL = referrerOrigin;\n\t}\n\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\n\t//    string, etc.\n\tif (referrerURLCallback) {\n\t\treferrerURL = referrerURLCallback(referrerURL);\n\t}\n\n\tif (referrerOriginCallback) {\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\n\t}\n\n\t// 8.Execute the statements corresponding to the value of policy:\n\tconst currentURL = new URL(request.url);\n\n\tswitch (policy) {\n\t\tcase 'no-referrer':\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin':\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'unsafe-url':\n\t\t\treturn referrerURL;\n\n\t\tcase 'strict-origin':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerOrigin.\n\t\t\treturn referrerOrigin.toString();\n\n\t\tcase 'strict-origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 3. Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'same-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. Return no referrer.\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'no-referrer-when-downgrade':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerURL.\n\t\t\treturn referrerURL;\n\n\t\tdefault:\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\n\t}\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy \u00A78.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\nexport function parseReferrerPolicyFromHeader(headers) {\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n\t//    and response\u2019s header list.\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\n\n\t// 2. Let policy be the empty string.\n\tlet policy = '';\n\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n\t//    string, then set policy to token.\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\n\t// values with fallbacks for older user agents, as described in \u00A7 11.1 Unknown Policy Values.\n\tfor (const token of policyTokens) {\n\t\tif (token && ReferrerPolicy.has(token)) {\n\t\t\tpolicy = token;\n\t\t}\n\t}\n\n\t// 4. Return policy.\n\treturn policy;\n}\n", "import {FetchBaseError} from './base.js';\n\n/**\n * AbortError interface for cancelled requests\n */\nexport class AbortError extends FetchBaseError {\n\tconstructor(message, type = 'aborted') {\n\t\tsuper(message, type);\n\t}\n}\n", "\nimport fetch from 'node-fetch'\nimport formatDate from \"intl-dateformat\"\nexport const getCurrentSolarData = async () =>{\n    \n    const now = new Date()\n    const nowMinus24 = new Date(new Date().getTime() - (60 * 60 * 24 * 1000));\n    const nowStr= formatDate(now, \"YYYY-MM-DD hh:mm:ss\");\n    const nowMinus24Str= formatDate(nowMinus24, \"YYYY-MM-DD hh:mm:ss\");\n    const url = `https://monitoringapi.solaredge.com/site/2643271/power?startTime=${nowMinus24Str}&endTime=${nowStr}&api_key=7PLGIAAOAT0XGUB1B4V5IJKSU21WEUXI`\n    console.log(url);\n    const res = await fetch(url)\n    return res.json();\n}\n"],
  "mappings": "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",
  "names": []
}
